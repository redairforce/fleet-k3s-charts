{{- define "readarr.deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  namespace: {{ .namespace }}
  labels:
    app: {{ .name }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
      annotations:
        diun.enable: "true"
        autoheal: "true"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      {{- if .config }}
      - name: init-config
        image: busybox
        command: 
        - sh
        - -c
        - |
          echo "Checking source config..."
          ls -la /tmp/readarr-config/
          echo "Source config content:"
          cat /tmp/readarr-config/config.xml
          echo "Copying config if needed..."
          if [ ! -f /config/config.xml ]; then
            cp /tmp/readarr-config/config.xml /config/config.xml
            echo "Config copied. Verifying..."
            ls -la /config/config.xml
            echo "Destination content:"
            cat /config/config.xml
          else
            echo "Config already exists"
          fi
        volumeMounts:
        - name: config
          mountPath: /config
          subPath: {{ .volumes.configSubPath }}
        - name: {{ .name }}-config
          mountPath: /tmp/readarr-config
      {{- end }}
      containers:
      - name: readarr
        image: "{{ .image.repository }}:{{ .image.tag }}"
        imagePullPolicy: {{ .image.pullPolicy }}
        ports:
        - containerPort: 8787
          name: http
        env:
        - name: PUID
          value: "{{ .env.puid }}"
        - name: PGID
          value: "{{ .env.pgid }}"
        - name: TZ
          value: "{{ .env.tz }}"
        volumeMounts:
        - name: config
          mountPath: /config
          subPath: {{ .volumes.configSubPath }}
        - name: books
          mountPath: /mnt/books/{{ .volumes.booksSubPath }}
        - name: downloads
          mountPath: /mnt/downloads
        livenessProbe:
          httpGet:
            path: /
            port: 8787
          initialDelaySeconds: {{ .healthcheck.startPeriod }}
          periodSeconds: {{ .healthcheck.interval }}
          timeoutSeconds: {{ .healthcheck.timeout }}
          failureThreshold: {{ .healthcheck.retries }}
        startupProbe:
          httpGet:
            path: /
            port: 8787
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8787
          initialDelaySeconds: {{ .healthcheck.startPeriod }}
          periodSeconds: {{ .healthcheck.interval }}
          timeoutSeconds: {{ .healthcheck.timeout }}
          failureThreshold: {{ .healthcheck.retries }}
        resources:
          {{- toYaml .resources | nindent 12 }}
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ .volumes.configPvc }}
      - name: books
        persistentVolumeClaim:
          claimName: {{ .volumes.booksPvc }}
      - name: downloads
        persistentVolumeClaim:
          claimName: {{ .volumes.downloadsPvc }}
      {{- if .config }}
      - name: {{ .name }}-config
        configMap:
          name: {{ .name }}-config
      {{- end }}
      restartPolicy: Always
      tolerations:
      - key: "node.kubernetes.io/disk-pressure"
        operator: "Exists"
        effect: "NoSchedule"
{{- end }}

---

{{- $root := . -}}
{{- with .Values }}
{{- include "readarr.deployment" (dict 
  "name" "readarr-audio" 
  "namespace" .namespace 
  "replicaCount" .replicaCount 
  "image" .readarrAudio.image 
  "env" .readarrAudio.env 
  "volumes" (dict 
    "configPvc" .volumes.config.pvcNameLonghornAudio
    "configSubPath" .volumes.config.subPathAudio
    "booksPvc" .volumes.books.pvcName
    "booksSubPath" "audio"
    "downloadsPvc" .volumes.downloads.pvcName
  )
  "healthcheck" .healthcheck
  "resources" .resources
  "config" .readarrAudio.config
) }}

---

{{- include "readarr.deployment" (dict 
  "name" "readarr-ebook" 
  "namespace" .namespace 
  "replicaCount" .replicaCount 
  "image" .readarrEbook.image 
  "env" .readarrEbook.env 
  "volumes" (dict 
    "configPvc" .volumes.config.pvcNameLonghornEbook
    "configSubPath" .volumes.config.subPathEbook
    "booksPvc" .volumes.books.pvcName
    "booksSubPath" "ebooks"
    "downloadsPvc" .volumes.downloads.pvcName
  )
  "healthcheck" .healthcheck
  "resources" .resources
  "config" .readarrEbook.config
) }}
{{- end }}
