apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: {{ .Values.namespace }}
  labels:
    app: prowlarr
    version: {{ .Values.image.tag }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
        version: {{ .Values.image.tag }}
      annotations:
        diun.enable: "true"
        autoheal: "true"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: init-config
          image: busybox:1.36
          command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > /config/config.xml
              <Config>
                <BindAddress>*</BindAddress>
                <Port>9696</Port>
                <SslPort>6969</SslPort>
                <EnableSsl>False</EnableSsl>
                <LaunchBrowser>True</LaunchBrowser>
                <ApiKey>f700bf66c1844890adeaca698a71400c</ApiKey>
                <AuthenticationMethod>Forms</AuthenticationMethod>
                <AuthenticationRequired>Enabled</AuthenticationRequired>
                <Branch>develop</Branch>
                <LogLevel>debug</LogLevel>
                <SslCertPath></SslCertPath>
                <SslCertPassword></SslCertPassword>
                <UrlBase></UrlBase>
                <InstanceName>Prowlarr</InstanceName>
                <UpdateMechanism>Docker</UpdateMechanism>
                <PostgresUser>{{ .Values.postgres.user }}</PostgresUser>
                <PostgresPassword>$(cat /secrets/POSTGRES_PASSWORD)</PostgresPassword>
                <PostgresPort>{{ .Values.postgres.port }}</PostgresPort>
                <PostgresHost>{{ .Values.postgres.host }}</PostgresHost>
                <PostgresMainDb>{{ .Values.postgres.mainDb }}</PostgresMainDb>
                <PostgresLogDb>{{ .Values.postgres.logDb }}</PostgresLogDb>
              </Config>
              EOF
          volumeMounts:
            - name: config
              mountPath: /config
              subPath: {{ .Values.volumes.config.subPath }}
            - name: postgres-secret
              mountPath: /secrets
              readOnly: true
      containers:
        - name: prowlarr
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 9696
              name: http
          env:
            - name: PUID
              value: "{{ .Values.env.puid }}"
            - name: PGID
              value: "{{ .Values.env.pgid }}"
            - name: TZ
              value: "{{ .Values.env.tz }}"
          volumeMounts:
            - name: config
              mountPath: /config
              subPath: {{ .Values.volumes.config.subPath }}
          livenessProbe:
            httpGet:
              path: /
              port: 9696
            initialDelaySeconds: {{ .Values.healthcheck.startPeriod }}
            periodSeconds: {{ .Values.healthcheck.interval }}
            timeoutSeconds: {{ .Values.healthcheck.timeout }}
            failureThreshold: {{ .Values.healthcheck.retries }}
          readinessProbe:
            httpGet:
              path: /
              port: 9696
            initialDelaySeconds: {{ .Values.healthcheck.startPeriod }}
            periodSeconds: {{ .Values.healthcheck.interval }}
            timeoutSeconds: {{ .Values.healthcheck.timeout }}
            failureThreshold: {{ .Values.healthcheck.retries }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: {{ .Values.volumes.config.pvcNameLonghorn }}
        - name: postgres-secret
          secret:
            secretName: arr-postgres-secret
      restartPolicy: Always
      tolerations:
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoSchedule"
